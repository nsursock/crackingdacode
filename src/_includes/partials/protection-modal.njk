<style>
    [x-cloak] {
        display: none;
    }
</style>
<div
    class="relative z-[500]"
    aria-labelledby="modal-title"
    role="dialog"
    aria-modal="true"
    x-show="(!$store.auth.user || ($store.auth.user && !paymentMade)) && percent > 15 && !processFinished"
    x-cloak="x-cloak">
    <!-- Background backdrop, show/hide based on modal state.
    
    Entering: "ease-out duration-300"
        From: "opacity-0"
        To: "opacity-100"
    Leaving: "ease-in duration-200"
        From: "opacity-100"
        To: "opacity-0" -->
    <div
        x-show="(!$store.auth.user || ($store.auth.user && !paymentMade)) && percent > 15 && !processFinished"
        x-transition:enter=" ease-out duration-300 "
        x-transition:enter-start="opacity-0 "
        x-transition:enter-end="opacity-100  "
        x-transition:leave=" ease-in duration-200 "
        x-transition:leave-start="opacity-100 "
        x-transition:leave-end="opacity-0 "
        class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity backdrop-filter backdrop-blur"></div>
    <div class="fixed z-10 inset-0 overflow-y-auto">
        <div
            class="flex items-end sm:items-center justify-center min-h-full p-4 text-center sm:p-0">
            <!-- Modal panel, show/hide based on modal state.
            
            Entering: "ease-out duration-300"
                From: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                To: "opacity-100 translate-y-0 sm:scale-100"
            Leaving: "ease-in duration-200"
                From: "opacity-100 translate-y-0 sm:scale-100"
                To: "opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95" -->
            <div
                x-show="(!$store.auth.user || ($store.auth.user && !paymentMade)) && percent > 15 && !processFinished"
                x-transition:enter=" ease-out duration-300 "
                x-transition:enter-start="opacity-0 translate-y-4 md:translate-y-0 md:scale-95 "
                x-transition:enter-end="opacity-100 translate-y-0 md:scale-100  "
                x-transition:leave=" ease-in duration-200 "
                x-transition:leave-start="opacity-100 translate-y-0 md:scale-100 "
                x-transition:leave-end="opacity-0 translate-y-4 md:translate-y-0 md:scale-95 "
                class="relative bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8
                    sm:max-w-sm sm:w-full sm:p-6 dark:bg-gray-800">
                <div>
                    <div x-show="currentStep === 1">
                        <div>
                            <div
                                class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 dark:bg-green-900">
                                <!-- Heroicon name: outline/check -->
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6 text-green-600"
                                    fill="none"
                                    viewbox="0 0 24 24"
                                    stroke="currentColor"
                                    stroke-width="2">
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
                                </svg>
                            </div>
                            <div class="mt-3 text-center sm:mt-5">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-gray-50" id="modal-title">Unlock article</h3>
                                <div class="mt-2">
                                    <p class="text-sm text-gray-500 dark:text-gray-400">First, you will need to signup or login, and then you will have to
                                        make a payment of {{ protection }}€.</p>
                                </div>
                            </div>
                        </div>
                        <div class="mt-5 sm:mt-6">
                            <button
                                @click="currentStep++"
                                class="umami--focus--step1-button inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4
                                    py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2
                                    focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                                Proceed</button>
                        </div>
                    </div>
                    <div x-show="currentStep === 2" x-data="dataCodeAuth()">
                        <div>
                            <div
                                class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 dark:bg-green-900">
                                <!-- Heroicon name: outline/check -->
                                <svg class="h-6 w-6 text-green-600" fill="currentColor" viewbox="0 0 24 24">
                                    <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0
                                    018 0z"/>
                                </svg>
                            </div>
                            <div class="mt-3 text-center sm:mt-5">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-gray-50" id="modal-title">Credentials</h3>
                                <div class="mt-2">
                                    <template x-if="$store.auth.user">
                                        <p class="text-sm text-gray-500 dark:text-gray-400">
                                            <span class="flex items-center justify-center mt-2" x-text="`You are logged in as ${$store.auth.user.name}.`"></span>All you need to do now is make a payment of {{ protection }}€ to unlock the article.</p>
                                    </template>
                                    <template x-if="!$store.auth.user">
                                        <p class="text-sm text-gray-500 dark:text-gray-400">If you're already a member, use the login panel. Otherwise, you can
                                            easily signup using the other panel.</p>
                                    </template>
                                </div>
                            </div>
                        </div>
                        <template x-if="$store.auth.user">
                            <div class="mt-5 sm:mt-6">
                                <button
                                    @click="currentStep++"
                                    class="umami--focus--step2-button inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4
                                        py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2
                                        focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                                    Next</button>
                            </div>
                        </template>
                        <template x-if="!$store.auth.user">
                            <div
                                x-data="{ tab: window.location.hash ? window.location.hash.substring(1) : 'signup' }"
                                class="mt-3"
                                id="tab_wrapper">
                                <!-- The tabs navigation -->
                                <div class="border-b border-gray-200">
                                    <nav
                                        class="-mb-px flex" aria-label="Tabs">
                                        <!-- Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700
                                        hover:border-gray-300" -->
                                        <a
                                            href="#"
                                            @click.prevent="tab = 'signup'"
                                            :class="{ 'border-indigo-500 text-indigo-600': tab === 'signup', 'border-transparent dark:text-gray-400 text-gray-500 hover:text-gray-700 hover:border-gray-300': tab !== 'signup' }"
                                            class="w-1/2 py-4 px-1 text-center border-b-2 font-medium text-sm">
                                            Signup
                                        </a>
                                        <a
                                            href="#"
                                            @click.prevent="tab = 'login'"
                                            :class="{ 'border-indigo-500 text-indigo-600': tab === 'login', 'border-transparent dark:text-gray-400 text-gray-500 hover:text-gray-700 hover:border-gray-300': tab !== 'login' }"
                                            class="w-1/2 py-4 px-1 text-center border-b-2 font-medium text-sm">
                                            Login
                                        </a>
                                    </nav>
                                </div>
                                <!-- The tabs content -->
                                <div x-show="tab === 'signup'">
                                    <form @submit.prevent="signup" class="mt-8 space-y-6" action="#" method="POST">
                                        <input type="hidden" name="remember" value="true">
                                        <div class="rounded-md shadow-sm -space-y-px">
                                            <div>
                                                <label for="email-address" class="sr-only">Email address</label>
                                                <input
                                                    x-model="email"
                                                    id="email-address"
                                                    name="email"
                                                    type="email"
                                                    autocomplete="email"
                                                    required
                                                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                                                        py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500
                                                        focus:border-indigo-500 focus:z-10 sm:text-sm"
                                                    placeholder="Email address">
                                            </div>
                                            <div>
                                                <label for="display-name" class="sr-only">Display name</label>
                                                <input
                                                    x-model="name"
                                                    id="display-name"
                                                    name="name"
                                                    type="name"
                                                    required
                                                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                                                        py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-indigo-500
                                                        focus:border-indigo-500 focus:z-10 sm:text-sm"
                                                    placeholder="Display name">
                                            </div>
                                            <div>
                                                <label for="password" class="sr-only">Password</label>
                                                <input
                                                    x-model="password"
                                                    id="password"
                                                    name="password"
                                                    type="password"
                                                    autocomplete="current-password"
                                                    required
                                                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                                                        py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500
                                                        focus:border-indigo-500 focus:z-10 sm:text-sm"
                                                    placeholder="Password">
                                            </div>
                                        </div>
                                        <div>
                                            <button
                                                type="submit"
                                                class="umami--focus--step2-button group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm
                                                    font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2
                                                    focus:ring-indigo-500">
                                                <span
                                                    class="absolute left-0 inset-y-0 flex items-center pl-3">
                                                    <!-- Heroicon name: solid/lock-closed -->
                                                    <svg
                                                        class="h-5 w-5 text-indigo-500 group-hover:text-indigo-400"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewbox="0 0 20 20"
                                                        fill="currentColor"
                                                        aria-hidden="true">
                                                        <path
                                                            fill-rule="evenodd"
                                                            d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                                                            clip-rule="evenodd"/>
                                                    </svg>
                                                </span>
                                                Sign up
                                            </button>
                                            <template x-if="error">
                                                <div class="flex items-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-red-100 bg-red-600 mt-1">
                                                    <span class="h-6 flex items-center">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewbox="0 0 20 20" fill="currentColor">
                                                            <path
                                                                fill-rule="evenodd"
                                                                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                                                                clip-rule="evenodd"/>
                                                        </svg>
                                                    </span>
                                                    <span class="ml-2" x-text="error"></span>
                                                </div>
                                            </template>
                                        </div>
                                    </form>
                                </div>
                                <div x-show="tab === 'login'">
                                    <form @submit.prevent="login" class="mt-8 space-y-6" action="#" method="POST">
                                        <input type="hidden" name="remember" value="true">
                                        <div class="rounded-md shadow-sm -space-y-px">
                                            <div>
                                                <label for="email-address" class="sr-only">Email address</label>
                                                <input
                                                    x-model="email"
                                                    id="email-address"
                                                    name="email"
                                                    type="email"
                                                    autocomplete="email"
                                                    required
                                                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                                                        py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500
                                                        focus:border-indigo-500 focus:z-10 sm:text-sm"
                                                    placeholder="Email address">
                                            </div>
                                            <div>
                                                <label for="password" class="sr-only">Password</label>
                                                <input
                                                    x-model="password"
                                                    id="password"
                                                    name="password"
                                                    type="password"
                                                    autocomplete="current-password"
                                                    required
                                                    class="dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 appearance-none rounded-none relative block w-full px-3
                                                        py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500
                                                        focus:border-indigo-500 focus:z-10 sm:text-sm"
                                                    placeholder="Password">
                                            </div>
                                        </div>
                                        <div>
                                            <button
                                                type="submit"
                                                class="umami--focus--step2-button group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm
                                                    font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2
                                                    focus:ring-indigo-500">
                                                <span
                                                    class="absolute left-0 inset-y-0 flex items-center pl-3">
                                                    <!-- Heroicon name: solid/lock-closed -->
                                                    <svg
                                                        class="h-5 w-5 text-indigo-500 group-hover:text-indigo-400"
                                                        xmlns="http://www.w3.org/2000/svg"
                                                        viewbox="0 0 20 20"
                                                        fill="currentColor"
                                                        aria-hidden="true">
                                                        <path
                                                            fill-rule="evenodd"
                                                            d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                                                            clip-rule="evenodd"/>
                                                    </svg>
                                                </span>
                                                Log in
                                            </button>
                                            <template x-if="error">
                                                <div class="flex items-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-red-100 bg-red-600 mt-1">
                                                    <span class="h-6 flex items-center">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewbox="0 0 20 20" fill="currentColor">
                                                            <path
                                                                fill-rule="evenodd"
                                                                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                                                                clip-rule="evenodd"/>
                                                        </svg>
                                                    </span>
                                                    <span class="ml-2" x-text="error"></span>
                                                </div>
                                            </template>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </template>
                    </div>
                    <div x-show="currentStep === 3" x-data="dataCodePayment()">
                        <div>
                            <div
                                class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 dark:bg-green-900">
                                <!-- Heroicon name: outline/check -->
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6 text-green-600"
                                    fill="none"
                                    viewbox="0 0 24 24"
                                    stroke="currentColor"
                                    stroke-width="2">
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11
                                            0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </div>
                            <div class="mt-3 text-center sm:mt-5">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-gray-50" id="modal-title">Payment</h3>
                                <div class="mt-2">
                                    <p class="text-sm text-gray-500 dark:text-gray-400">This website uses Stripe to handle payments. Security is at the
                                        heart of Stripe and your information are safe.</p>
                                </div>
                            </div>
                        </div>
                        <form id="payment-form" class="mt-5 sm:mt-6" @submit.prevent="pay">
                            <div
                                id="payment-element"><!-- Elements will create form elements here -->
                            </div>
                            <button
                                id="submit"
                                class="umami--focus--step3-button mt-5 sm:mt-6 inline-flex justify-center w-full rounded-md border border-transparent
                                    shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2
                                    focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                                Pay
                                {{ protection }}€</button>
                            <template x-if="error">
                                <div
                                    class="flex items-center py-2 px-3 border border-transparent text-sm font-medium rounded-md text-red-100 bg-red-600 mt-1"
                                    id="error-message">
                                    <!-- Display error message to your customers here -->
                                    <span class="h-6 flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewbox="0 0 20 20" fill="currentColor">
                                            <path
                                                fill-rule="evenodd"
                                                d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
                                                clip-rule="evenodd"/>
                                        </svg>
                                    </span>
                                    <span class="ml-2" x-text="error"></span>
                                </div>
                            </template>
                        </form>
                    </div>
                    <div x-show="currentStep === 4">
                        <div>
                            <div
                                class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 dark:bg-green-900">
                                <!-- Heroicon name: outline/check -->
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6 text-green-600"
                                    fill="none"
                                    viewbox="0 0 24 24"
                                    stroke="currentColor"
                                    stroke-width="2">
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                                </svg>
                            </div>
                            <div class="mt-3 text-center sm:mt-5">
                                <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-gray-50" id="modal-title">Continue reading</h3>
                                <div class="mt-2">
                                    <p class="text-sm text-gray-500 dark:text-gray-400">You can read the full article now. By the way, if you are a new
                                        member, you can also comment on articles using the same credentials.</p>
                                </div>
                            </div>
                        </div>
                        <div class="mt-5 sm:mt-6">
                            <button
                                @click="processFinished = true"
                                class="umami--focus--step4-button inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4
                                    py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2
                                    focus:ring-offset-2 focus:ring-indigo-500 sm:text-sm">
                                Dismiss</button>
                        </div>
                    </div>
                    <!-- This example requires Tailwind CSS v2.0+ -->
                    <nav class="mt-6 flex items-center justify-center" aria-label="Progress" x-data="{ numSteps: 4 }">
                        <p class="dark:text-white text-sm font-medium">Step
                            <span x-text="`${currentStep} of ${numSteps}`"></span>
                        </p>
                        <ol role="list" class="ml-8 flex items-center space-x-5">
                            <template x-for="i in numSteps">
                                <li>
                                    <template
                                        x-if="i < currentStep">
                                        <!-- Completed Step -->
                                        <span class="block w-2.5 h-2.5 bg-indigo-600 rounded-full hover:bg-indigo-900">
                                            <span class="sr-only">Step
                                                <span x-text="i"></span>
                                            </span>
                                        </span>
                                    </template>
                                    <template
                                        x-if="i === currentStep">
                                        <!-- Current Step -->
                                        <span class="relative flex items-center justify-center" aria-current="step">
                                            <span class="absolute w-5 h-5 p-px flex" aria-hidden="true">
                                                <span class="w-full h-full rounded-full bg-indigo-200"></span>
                                            </span>
                                            <span class="relative block w-2.5 h-2.5 bg-indigo-600 rounded-full" aria-hidden="true"></span>
                                            <span class="sr-only">Step
                                                <span x-text="i"></span>
                                            </span>
                                        </span>
                                    </template>
                                    <template
                                        x-if="i > currentStep">
                                        <!-- Upcoming Step -->
                                        <span class="block w-2.5 h-2.5 bg-gray-200 rounded-full hover:bg-gray-400">
                                            <span class="sr-only">Step
                                                <span x-text="i"></span>
                                            </span>
                                        </span>
                                    </template>
                                </li>
                            </template>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function loadScript(src) {
        return new Promise(function (resolve, reject) {
            var s
            s = document.createElement('script')
            s.src = src
            s.onload = resolve
            s.onerror = reject
            if (document.body == null) {
                document.head.appendChild(s)
            } else {
                document.body.appendChild(s)
            }
        })
    }
    function dataCodeAuth() {
        return {
            error: '',
            login() {
                this.error = ''
                var data = {
                    email: this.email,
                    password: this.password
                }
                fetch('/api/auth-login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then((response) => response.json())
                    .then((message) => {
                        if (!message.success) 
                            this.error = message.error
                         else {
                            localStorage.setItem('crdacode_token', message.user.token);
                            Alpine
                                .store('auth')
                                .setUser(message.user)
                                this
                                .currentStep ++
                        }
                    })
                    .catch((error) => {
                        this.error = error
                    })
            },
            signup() {
                this.error = ''
                var data = {
                    email: this.email,
                    name: this.name,
                    password: this.password
                }
                fetch('/api/auth-signup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                    .then((response) => response.json())
                    .then((message) => {
                        if (!message.success) 
                            this.error = message.error
                         else {
                            localStorage.setItem('crdacode_token', message.user.token);
                            Alpine
                                .store('auth')
                                .setUser(message.user)
                                this
                                .currentStep ++
                        }
                    })
                    .catch((error) => {
                        this.error = error
                    })
            }
        }
    }
    function dataCodePayment() {
        return {
            email: '',
            error: '',
            stripe: null,
            elements: null,
            async init() {
                await loadScript('https://js.stripe.com/v3')
                this.stripe = Stripe('{{ env.stripeKey }}')
                const data = {
                    protection: '{{ protection }}'
                }
                const response = await fetch('/api/payment-code', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                })
                const {client_secret: clientSecret} = await response.json();
                const appearance = {
                    theme: document.documentElement.classList.contains('dark') ? 'night' : 'stripe',
                    variables: {
                        fontFamily: 'Aldrich'
                    }
                };
                const options = {
                    clientSecret: clientSecret,
                    // Fully customizable with appearance API.
                    appearance: appearance,
                    fonts: [
                        {
                            family: 'Aldrich',
                            src: 'url(/static/fonts/aldrich/aldrich-v17-latin-regular.woff)',
                            weight: '400',
                            display: 'block',
                            style: 'normal'
                        }
                    ]
                };
                // Set up Stripe.js and Elements to use in checkout form, passing the client secret obtained in step 2
                this.elements = this.stripe.elements(options);
                // Create and mount the Payment Element
                const paymentElement = this.elements.create('payment');
                paymentElement.mount('#payment-element');
            },
            async pay() {
                const {error} = await this.stripe.confirmPayment({ // `Elements` instance that was used to create the Payment Element
                    elements: this.elements,
                    redirect: 'if_required',
                    confirmParams: {
                        payment_method_data: {
                            billing_details: {
                                name: Alpine
                                    .store('auth')
                                    .user
                                    .name,
                                email: Alpine
                                    .store('auth')
                                    .user
                                    .email
                            }
                        }
                    }
                })
                if (error) {
                    // This point will only be reached if there is an immediate error when confirming the payment. Show error to your
                    // customer (for example, payment details incomplete)
                    this.error = error.message;
                } else {
                    var data = {
                        user: Alpine
                            .store('auth')
                            .user
                            .email,
                        article: window.location.pathname
                    }
                    fetch('/api/payment-code-update', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })
                        .then((response) => response.json())
                        .then((message) => {
                            if (!message.success) 
                                this.error = message.error
                             else {
                                this.currentStep ++
                            }
                        })
                        .catch((error) => {
                            console.log(error)
                            this.error = error
                        })
                    // Your customer will be redirected to your `return_url`. For some payment methods like iDEAL, your customer will be
                    // redirected to an intermediate site first to authorize the payment, then redirected to the `return_url`.
                }
            }
        }
    }
</script>